<pre class='metadata'>
Title: DeviceOrientation Event Specification
Shortname: orientation-event
Level: none
Status: ED
Group: dap
TR: https://www.w3.org/TR/orientation-event/
ED: https://w3c.github.io/deviceorientation/
Repository: w3c/deviceorientation
Editor: Reilly Grant 83788, Google LLC https://www.google.com
Editor: Raphael Kubo da Costa 95850, Intel Corporation https://intel.com
Former Editor: Rich Tibbett, Opera Software ASA
Former Editor: Tim Volodine, Google Inc
Former Editor: Steve Block, Google Inc until July 2012
Former Editor: Andrei Popescu, Google Inc until July 2012
Abstract: This specification defines several new DOM events that provide information about the physical orientation and motion of a hosting device.
Boilerplate: omit issues-index, omit conformance, repository-issue-tracking no
Include MDN Panels: if possible
Issue Tracking: DeviceOrientation Event Specification Issues Repository https://github.com/w3c/deviceorientation/issues
Markup Shorthands: css no
</pre>
<pre class="anchors">
urlPrefix: https://w3c.github.io/sensors/; spec: GENERIC-SENSOR
    type: dfn
        text: can provide readings flag; url: virtual-sensor-can-provide-readings-flag
        text: virtual sensor mapping; url: virtual-sensor-mapping
urlPrefix: https://w3c.github.io/webdriver/; spec: WEBDRIVER2
    type: dfn
        text: get a property; url: dfn-getting-properties
</pre>

Conformance requirements {#conformance-requirements}
====================================================

All diagrams, examples, and notes in this specification are non-normative, as are all sections explicitly marked non-normative. Everything else in this specification is normative.

The key words "MUST", "MUST NOT", "REQUIRED", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this document are to be interpreted as described in RFC2119. For readability, these words do not appear in all uppercase letters in this specification. [[!RFC2119]]

Requirements phrased in the imperative as part of algorithms (such as "strip any leading space characters" or "return false and abort these steps") are to be interpreted with the meaning of the key word ("must", "should", "may", etc) used in introducing the algorithm.

Conformance requirements phrased as algorithms or specific steps may be implemented in any manner, so long as the end result is equivalent. (In particular, the algorithms defined in this specification are intended to be easy to follow, and not intended to be performant.)

User agents may impose implementation-specific limits on otherwise unconstrained inputs, e.g. to prevent denial of service attacks, to guard against running out of memory, or to work around platform-specific limitations.

Implementations that use ECMAScript to implement the APIs defined in this specification must implement them in a manner consistent with the ECMAScript Bindings defined in the Web IDL specification, as this specification uses that specification's terminology. [[!WEBIDL]]

The events introduced by this specification implement the Event interface defined in the DOM Specification, [[!DOM]]. Implementations must therefore support this specification.



Introduction {#introduction}
============================

<em>This section is non-normative.</em>

This specification provides two new DOM events for obtaining information about the physical orientation and movement of the hosting device. The information provided by the events is not raw sensor data, but rather high-level data which is agnostic to the underlying source of information. Common sources of information include gyroscopes, compasses and accelerometers.

The first DOM event provided by the specification, {{deviceorientation}}, supplies the physical orientation of the device, expressed as a series of rotations from a local coordinate frame.

The second DOM event provided by this specification, {{devicemotion}}, supplies the acceleration of the device, expressed in Cartesian coordinates in a coordinate frame defined in the device. It also supplies the rotation rate of the device about a local coordinate frame. Where practically possible, the event should provide the acceleration of the device's center of mass.

The following code extracts illustrate basic use of the events.

<div class="example">
Registering to receive {{deviceorientation}} events:
<pre class="lang-js">
window.addEventListener("deviceorientation", function(event) {
    // process event.alpha, event.beta and event.gamma
}, true);
</pre>
</div>

<div class="example">
A device lying flat on a horizontal surface with the top of the screen pointing West has the following orientation:
<pre class="lang-js">
{
  alpha: 90,
  beta: 0,
  gamma: 0
};
</pre>
To get the compass heading, one would simply subtract {{DeviceOrientationEvent/alpha}} from 360 degrees. As the device is turned on the horizontal surface, the compass heading is (360 - alpha).
</div>

<div class="example">
A user is holding the device in their hand, with the screen in a vertical plane and the top of the screen pointing upwards. The value of {{DeviceOrientationEvent/beta}} is 90, irrespective of what {{DeviceOrientationEvent/alpha}} and {{DeviceOrientationEvent/gamma}} are.
</div>

<div class="example">
A user facing a compass heading of alpha degrees is holding the device in their hand, with the screen in a vertical plane and the top of the screen pointing to their right. The orientation of the device is:
<pre class="lang-js">
{
  alpha: 270 - alpha,
  beta: 0,
  gamma: 90
};
</pre>
</div>

<div class="example">
Registering to receive {{devicemotion}} events:
<pre class="lang-js">
window.addEventListener("devicemotion", function(event) {
    // Process event.acceleration, event.accelerationIncludingGravity,
    // event.rotationRate and event.interval
}, true);
</pre>
</div>

<div class="example">
A device lying flat on a horizontal surface with the screen upmost has an {{DeviceMotionEvent/acceleration}} of zero and the following value for {{DeviceMotionEvent/accelerationIncludingGravity}}:
<pre class="lang-js">
{
  x: 0,
  y: 0,
  z: 9.8
};
</pre>
</div>

<div class="example">
A device in free-fall, with the screen horizontal and upmost, has an {{DeviceMotionEvent/accelerationIncludingGravity}} of zero and the following value for acceleration:
<pre class="lang-js">
{
  x: 0,
  y: 0,
  z: -9.8
};
</pre>
</div>

<div class="example">
A device is mounted in a vehicle, with the screen in a vertical plane, the top uppermost and facing the rear of the vehicle. The vehicle is travelling at speed v around a right-hand bend of radius r. The device records a positive x component for both {{DeviceMotionEvent/acceleration}} and {{DeviceMotionEvent/accelerationIncludingGravity}}. The device also records a negative value for {{DeviceMotionEvent/rotationRate!!attribute}}.{{DeviceMotionEventRotationRate/gamma}}:
<pre class="lang-js">
{
  acceleration: {x: v^2/r, y: 0, z: 0},
  accelerationIncludingGravity: {x: v^2/r, y: 9.8, z: 0},
  rotationRate: {alpha: 0, beta: 0, gamma: -v/r*180/pi}
};
</pre>
</div>

Scope {#scope}
==============

<em>This section is non-normative.</em>

This specification is limited to providing DOM events for retrieving information describing the physical orientation and motion of the hosting device. The intended purpose of this API is to enable simple use cases such as those in [[#use-cases|Use-Cases]] section. The scope of this specification does not include providing utilities to manipulate this data, such as transformation libraries. Nor does it include providing access to low sensor data, or direct control of these sensors.

Model {#model}
=====

Device Orientation {#device-orientation-model}
------------------

This specification expresses a device's physical orientation as a series of rotations relative to an <a>implementation-defined</a> reference coordinate frame.

The sequence of rotation steps is a set of intrinsic Tait-Bryan angles of type Z - X' - Y'' ([[EULERANGLES]]) that are applied on the <a>device coordinate system</a> defined in [[!ACCELEROMETER]] and summarized below:

* x is in the plane of the screen or keyboard and is positive towards the right hand side of the screen or keyboard.
* y is in the plane of the screen or keyboard and is positive towards the top of the screen or keyboard.
* z is perpendicular to the screen or keyboard, positive out of the screen or keyboard.

For a mobile device such as a phone or tablet, the device coordinate frame is defined relative to the screen in its standard orientation, typically portrait. This means that slide-out elements such as keyboards are not deployed, and swiveling elements such as displays are folded to their default position. If the orientation of the screen changes when the device is rotated or a slide-out keyboard is deployed, this does not affect the orientation of the coordinate frame relative to the device. For a laptop computer, the device coordinate frame is defined relative to the integrated keyboard.

Note: Users wishing to detect changes in screen orientation should refer to [[SCREEN-ORIENTATION]].

Rotations must use the right-hand convention, such that positive rotation around an axis is clockwise when viewed along the positive direction of the axis.

Note: the coordinate system used by this specification differs from [[css-transforms-2#transform-rendering]], where the y axis is positive to the bottom and rotations follow the left-hand convention. Additionally, {{DOMMatrix/rotateSelf()}} and {{DOMMatrixReadOnly/rotate()}}, specified in [[GEOMETRY-1]], apply rotations in an Z - Y' - X'' order, which differs from the order specified here.

A rotation represented by {{DeviceOrientationEvent/alpha}}, {{DeviceOrientationEvent/beta}} and {{DeviceOrientationEvent/gamma}} is carried out by the following steps:

1. Rotate the device frame around its z axis by {{DeviceOrientationEvent/alpha}} degrees, with {{DeviceOrientationEvent/alpha}} in [0, 360).
    <figure>
      <img src="start.png" alt="start orientation">
      <figcaption>Device in the initial position, with the reference (XYZ) and body (xyz) frames aligned.</figcaption>
    </figure>
    <figure>
      <img src="c-rotation.png" alt="rotation about z axis">
      <figcaption>Device rotated through angle alpha about z axis, with previous locations of x and y axes shown as x<sub>0</sub> and y<sub>0</sub>.</figcaption>
    </figure>
1. Rotate the device frame around its x axis by {{DeviceOrientationEvent/beta}} degrees, with {{DeviceOrientationEvent/beta}} in [-180, 180).
    <figure>
      <img src="a-rotation.png" alt="rotation about x axis">
      <figcaption>Device rotated through angle beta about new x axis, with previous locations of y and z axes shown as y<sub>0</sub> and z<sub>0</sub>.</figcaption>
    </figure>
1. Rotate the device frame around its y axis by {{DeviceOrientationEvent/gamma}} degrees, with {{DeviceOrientationEvent/gamma}} in [-90, 90).
    <figure>
      <img src="b-rotation.png" alt="rotation about y axis">
      <figcaption>Device rotated through angle gamma about new y axis, with previous locations of x and z axes shown as x<sub>0</sub> and z<sub>0</sub>.</figcaption>
    </figure>

Note: This choice of angles follows mathematical convention, but means that alpha is in the opposite sense to a compass heading. It also means that the angles do not match the roll-pitch-yaw convention used in vehicle dynamics.

### Choice of reference coordinate system ### {#choice-of-reference-coordinate-system}

A device's orientation is always relative to another coordinate system, whose choice influences the kind of information that the orientation conveys as well as the source of the orientation data.

<dfn>Relative orientation</dfn> is measured with an accelerometer and a gyroscope, and the reference coordinate system is arbitrary. Consequently, the orientation data provides information about changes relative to the initial position of the device.

Note: In native platform terms, this is similar to a relative <a href="https://learn.microsoft.com/en-us/uwp/api/windows.devices.sensors.sensorreadingtype#remarks">OrientationSensor</a> on Windows, a <a href="https://developer.android.com/reference/android/hardware/Sensor#TYPE_GAME_ROTATION_VECTOR">game rotation vector sensor</a> on Android, or the <a href="https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe/1615953-xarbitraryzvertical">xArbitraryZVertical</a> option for Core Motion.

<dfn>Absolute orientation</dfn> is measured with an accelerometer, a gyroscope and a magnetometer, and the reference coordinate system is the <a>Earth's reference coordinate system</a>.

Note: In native platform terms, this is similar to an absolute <a href="https://learn.microsoft.com/en-us/uwp/api/windows.devices.sensors.sensorreadingtype#remarks">OrientationSensor</a> on Windows, a <a href="https://developer.android.com/reference/android/hardware/Sensor#TYPE_ROTATION_VECTOR">rotation vector sensor</a> on Android, or the <a href="https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe/1616123-xmagneticnorthzvertical">xMagneticNorthZVertical</a> option for Core Motion.

Device Motion {#device-motion-model}
-------------

This specification expresses a device's motion in space by measuring its acceleration and rotation rate, which are obtained from an accelerometer and a gyroscope. The data is provided relative to the <a>device coordinate system</a> summarized in the previous section.

Acceleration is the rate of change of velocity of a device with respect to time. Is is expressed in meters per second squared (m/s<sup>2</sup>).

<dfn>Linear acceleration</dfn> represents the device's acceleration rate without the contribution of the gravity force. When the device is laying flat on a table, its <a>linear acceleration</a> is 0 m/s<sup>2</sup>.

When the acceleration <dfn lt="acceleration with gravity">includes gravity</dfn>, its value includes the effect of gravity and represents proper acceleration ([[PROPERACCELERATION]]). When the device is in free-fall, the acceleration is 0 m/s<sup>2</sup>. This is less useful in many applications but is provided as a means of providing best-effort support by implementations that are unable to provide <a>linear acceleration</a> (due, for example, to the lack of a gyroscope).

Note: In practice, <a>acceleration with gravity</a> represents the raw readings obtained from an [[MOTION-SENSORS#accelerometer]], or the [[G-FORCE]] whereas <a>linear acceleration</a> provides the readings of a [[MOTION-SENSORS#linear-acceleration-sensor]] and is likely a fusion sensor. [[MOTION-SENSORS]] and [[ACCELEROMETER]] both contain a more detailed discussion about the different types of accelerometers and accelerations that can be measured.

The <dfn>rotation rate</dfn> measures the rate at which the device rotates about a specified axis in the <a>device coordinate system</a>. As with device orientation, rotations must use the right-hand convention, such that positive rotation around an axis is clockwise when viewed along the positive direction of the axis. The <a>rotation rate</a> is measured in degrees per second (deg/s).

Note: [[MOTION-SENSORS]] and [[GYROSCOPE]] both contain a more detailed discussion of gyroscopes, rotation rates and measurements.

Permissions Policy integration {#permissions-policy-integration}
==============================

This specification defines the following <a>policy-controlled features</a>:

  - "<code><dfn export data-lt="accelerometer-feature">accelerometer</dfn></code>", whose <a>default allowlist</a> is "<code>self</code>".
  - "<code><dfn export data-lt="gyroscope-feature">gyroscope</dfn></code>", whose <a>default allowlist</a> is "<code>self</code>".
  - "<code><dfn export data-lt="magnetometer-feature">magnetometer</dfn></code>", whose <a>default allowlist</a> is "<code>self</code>".

<div class="note">
<span class="marker">Note:</span> Usage of the <a>policy-controlled features</a> above by this specification is as follows:

  - The <a event for="Window"><code>deviceorientation</code></a> event requires the "<a data-lt="accelerometer-feature"><code>accelerometer</code></a>" and "<a data-lt="gyroscope-feature"><code>gyroscope</code></a>" features when providing <a>relative orientation</a> data. For the implementation to fall back to <a>absolute orientation</a> data, the "<a data-lt="magnetometer-feature"><code>magnetometer</code></a>" feature is also used.
  - The <a event for="Window"><code>deviceorientationabsolute</code></a> event requires the "<a data-lt="accelerometer-feature"><code>accelerometer</code></a>", "<a data-lt="gyroscope-feature"><code>gyroscope</code></a>" and "<a data-lt="magnetometer-feature"><code>magnetometer</code></a>" features.
  - The <a event for="Window"><code>devicemotion</code></a> event requires the "<a data-lt="accelerometer-feature"><code>accelerometer</code></a>" and "<a data-lt="gyroscope-feature"><code>gyroscope</code></a>" features.

</div>

Permissions API integration {#permissions-api-integration}
===========================

This specification defines the following <a>default powerful features</a>:

 * "<dfn permission export><code>accelerometer</code></dfn>"
 * "<dfn permission export><code>gyroscope</code></dfn>"
 * "<dfn permission export><code>magnetometer</code></dfn>"

<div class="note">
<span class="marker">Note:</span> Usage of the <a>powerful features</a> above by this specification is as follows:

  - The <a event for="Window"><code>deviceorientation</code></a> event requires "<a permission><code>accelerometer</code></a>" and "<a permission><code>gyroscope</code></a>" when providing <a>relative orientation</a> data. For the implementation to fall back to <a>absolute orientation</a> data, "<a permission><code>magnetometer</code></a>" is also required.
  - The <a event for="Window"><code>deviceorientationabsolute</code></a> event requires "<a permission><code>accelerometer</code></a>", "<a permission><code>gyroscope</code></a>" and "<a permission><code>magnetometer</code></a>".
  - The <a event for="Window"><code>devicemotion</code></a> event requires "<a permission><code>accelerometer</code></a>" and "<a permission><code>gyroscope</code></a>".

</div>

Task Source {#taks-source}
===========

The <a>task source</a> for the <a>tasks</a> mentioned in this specification is the <dfn>device motion and orientation task source</dfn>.

API {#api}
==========================

<h3 id="deviceorientation">deviceorientation Event</h3>

<pre class="idl">
partial interface Window {
    [SecureContext] attribute EventHandler ondeviceorientation;
};

[Exposed=Window, SecureContext]
interface DeviceOrientationEvent : Event {
    constructor(DOMString type, optional DeviceOrientationEventInit eventInitDict = {});
    readonly attribute double? alpha;
    readonly attribute double? beta;
    readonly attribute double? gamma;
    readonly attribute boolean absolute;

    static Promise&lt;PermissionState> requestPermission(optional boolean absolute = false);
};

dictionary DeviceOrientationEventInit : EventInit {
    double? alpha = null;
    double? beta = null;
    double? gamma = null;
    boolean absolute = false;
};
</pre>

The <dfn attribute for="Window">ondeviceorientation</dfn> attribute is an [=event handler IDL attribute=] for the <code>ondeviceorientation</code> [=event handler=], whose [=event handler event type=] is <dfn event for=Window id="def-deviceorientation"><code>deviceorientation</code></dfn>.

The <dfn attribute for="DeviceOrientationEvent">alpha</dfn> attribute must return the value it was initialized to. It represents the rotation around the Z axis in the Z - X' - Y'' intrinsic Tait-Bryan angles described in [[#device-orientation-model]].

The <dfn attribute for="DeviceOrientationEvent">beta</dfn> attribute must return the value it was initialized to. It represents the rotation around the X' axis (produced after the rotation around the Z axis has been applied) axis in the Z - X' - Y'' intrinsic Tait-Bryan angles described in [[#device-orientation-model]].

The <dfn attribute for="DeviceOrientationEvent">gamma</dfn> attribute must return the value it was initialized to. It represents the rotation around the Y'' axis (produced after the rotation around the Z and X' axes have been applied in this order) in the Z - X' - Y'' intrinsic Tait-Bryan angles described in [[#device-orientation-model]].

The <dfn attribute for="DeviceOrientationEvent">absolute</dfn> attribute must return the value it was initialized to. It indicates whether <a>relative orientation</a> or <a>absolute orientation</a> data is being provided.

<div algorithm>
The <dfn method for="DeviceOrientationEvent">requestPermission(<var>absolute</var>)</dfn> method steps are:

 1. Let <var>global</var> be the <a>current global object</a>.
 1. Let <var>hasTransientActivation</var> be true if <a>this</a>'s <a>relevant global object</a> has <a>transient activation</a>, and false otherwise.
 1. Let <var>result</var> be <a>a new promise</a> in <a>this</a>'s <a>relevant Realm</a>.
 1. Run these steps <a>in parallel</a>:
     1. If <var>absolute</var> is true:
         1. Let <var>permissions</var> be « "<a permission>accelerometer</a>", "<a permission>gyroscope</a>", "<a permission>magnetometer</a>" ».
     1. Otherwise:
         1. Let <var>permissions</var> be « "<a permission>accelerometer</a>", "<a permission>gyroscope</a>" ».
     1. <a for="list">For each</a> <var>name</var> of <var>permissions</var>:
         1. If <var>name</var>'s <a>permission state</a> is "{{PermissionState/prompt}}" and <var>hasTransientActivation</var> is false:
             1. <a>Queue a global task</a> on the <a>device motion and orientation task source</a> given <var>global</var> to <a>reject</a> <var>result</var> with a "{{NotAllowedError}}" {{DOMException}}.
             1. Return.
     1. Let <var>permissionState</var> be "{{PermissionState/granted}}".
     1. <a for="list">For each</a> <var>name</var> of <var>permissions</var>:

         Note: There is no algorithm for requesting multiple permissions at once. However, user agents are encouraged to bundle concurrent requests for different kinds of media into a single user-facing permission prompt.

         1. If the result of <a>requesting permission to use</a> <var>name</var> is not "{{PermissionState/granted}}":
             1. Set <var>permissionState</var> to "{{PermissionState/denied}}".
             1. <a>Break</a>
     1. <a>Queue a global task</a> on the <a>device motion and orientation task source</a> given <var>global</var> to <a>resolve</a> <var>result</var> with <var>permissionState</var>.</li>
 1. Return <var>result</var>.

</div>

<div algorithm>
To <dfn>fire an orientation event</dfn> given a <var>event name</var> (a string), <var>window</var> (a {{Window}}) and <var>absolute</var> (a boolean):

  1. Let <var>orientation</var> be null.
  1. Let <var>topLevelTraversable</var> be <var>window</var>'s <a for=Window>navigable</a>'s <a for=navigable>top-level traversable</a>.
  1. Let <var>virtualSensorType</var> be "<code><a data-lt="relative-orientation virtual sensor type">relative-orientation</a></code>" if <var>absolute</var> is false, and "<code><a data-lt="absolute-orientation virtual sensor type">absolute-orientation</a></code>" otherwise.
  1. If <var>topLevelTraversable</var>'s <a>virtual sensor mapping</a> <a for=map>contains</a> <var>virtualSensorType</var>:
      1. Let <var>virtualSensor</var> be <var>topLevelTraversable</var>'s <a>virtual sensor mapping</a>[<var>virtualSensorType</var>].
      1. If <var>virtualSensor</var>'s <a>can provide readings flag</a> is true:
          1. Set <var>orientation</var> to the latest readings provided to <var>virtualSensor</var> with the "<code>alpha</code>", "<code>beta</code>", and "<code>gamma</code>" keys.
  1. Otherwise:
      1. If <var>absolute</var> is false:
          1. Set <var>orientation</var> to the device's <a>relative orientation</a> in the tridimensional plane.
      1. Otherwise:
          1. Set <var>orientation</var> to the device's <a>absolute orientation</a> in the tridimensional plane.
  1. Let <var>permissions</var> be null.
  1. If <var>absolute</var> is false:
      1. Set <var>permissions</var> to « "<a permission>accelerometer</a>", "<a permission>gyroscope</a>" ».
  1. Otherwise:
      1. Set <var>permissions</var> to « "<a permission>accelerometer</a>", "<a permission>gyroscope</a>", "<a permission>magnetometer</a>" ».
  1. Let <var>environment</var> be <var>window</var>'s <a>relevant settings object</a>.
  1. Run these steps <a>in parallel</a>:
    1. <a for="list">For each</a> <var>permission name</var> in <var>permissions</var>:
        1. Let <var>state</var> be the result of <a>getting the current permission state</a> with <var>permission name</var> and <var>environment</var>.
        1. If <var>state</var> is not "{{PermissionState/granted}}", return.
    1. <a>Queue a global task</a> on the <a>device motion and orientation task source</a> given <var>window</var> to run the following steps:
        1. Let <var>z rotation</var> be <var>orientation</var>'s representation as intrinsic Tait-Bryan angles Z - X' - Y'' along the Z axis, or null if the implementation cannot provide an angle value.
        1. If <var>z rotation</var> is not null, limit <var>z rotation</var>'s precision to 0.1 degrees.
        1. Let <var>x rotation</var> be <var>orientation</var>'s representation as intrinsic Tait-Bryan angles Z - X' - Y'' along the X' axis, or null if the implementation cannot provide an angle value.
        1. If <var>x rotation</var> is not null, limit <var>x rotation</var>'s precision to 0.1 degrees.
        1. Let <var>y rotation</var> be <var>orientation</var>'s representation as intrinsic Tait-Bryan angles Z - X' - Y'' along the Y'' axis, or null if the implementation cannot provide an angle value.
        1. If <var>y rotation</var> is not null, limit <var>y rotation</var>'s precision to 0.1 degrees.
        1. <a>Fire an event</a> named <var>event name</var> at <var>window</var>, using {{DeviceOrientationEvent}}, with the {{DeviceOrientationEvent/alpha}} attribute initialized to <var>z rotation</var>, the {{DeviceOrientationEvent/beta}} attribute initialized to <var>x rotation</var>, the {{DeviceOrientationEvent/gamma}} attribute initialized to <var>y rotation</var>, and the {{DeviceOrientationEvent/absolute}} attribute initialized to <var>absolute</var>.

</div>

A <dfn>significant change in orientation</dfn> indicates a difference in orientation values compared to the previous ones that warrants the firing of a <a event for="Window"><code>deviceorientation</code></a> or <a event for="Window"><code>deviceorientationabsolute</code></a> event. The process of determining whether a <a>significant change in orientation</a> has occurred is <a>implementation-defined</a>, though a maximum threshold for change of 1 degree is recommended. Implementations may also consider that it has occurred if they have reason to believe that the page does not have sufficiently fresh data.

Note: Implementations must take [[#automation]] into account to determine whether a <a>significant change in orientation</a> has occurred, so that a virtual sensor reading update causes it to be assessed.

<div algorithm="deviceorientation firing steps">
Whenever a <a>significant change in orientation</a> occurs, the user agent must execute the following steps on a <a for="/">navigable</a>'s <a for="navigable">active window</a> <var>window</var>:

  1. If the implementation cannot provide <a>relative orientation</a> or the resulting <a>absolute orientation</a> data is more accurate:
    1. Let <var>absolute</var> be true.
    1. Let <var>policies</var> be « "<a data-lt="accelerometer-feature"><code>accelerometer</code></a>", "<a data-lt="gyroscope-feature"><code>gyroscope</code></a>", "<a data-lt="magnetometer-feature"><code>magnetometer</code></a>" ».
  1. Otherwise:
    1. Let <var>absolute</var> be false.
    1. Let <var>policies</var> be « "<a data-lt="accelerometer-feature"><code>accelerometer</code></a>", "<a data-lt="gyroscope-feature"><code>gyroscope</code></a>" ».
  1. Let <var>document</var> be <var>window</var>'s <a>associated Document</a>.
  1. <a for="list">For each</a> <var>policy</var> of <var>policies</var>:
      1. If <var>document</var> is not <a>allowed to use</a> the <a>policy-controlled feature</a> named <var>policy</var>, return.
  1. Invoke <a>fire an orientation event</a> with <a event for="Window"><code>deviceorientation</code></a>, <var>window</var>, and <var>absolute</var>.

</div>

<!--
  * https://github.com/w3c/deviceorientation/issues/118: Does this mean a single event should be fired?
  * https://github.com/w3c/deviceorientation/issues/119: Should absolute's value be set here too?
  * Should this be a proper <dfn> in an algorithm?
-->
If an implementation can never provide orientation information, the event should be fired with the {{DeviceOrientationEvent/alpha}}, {{DeviceOrientationEvent/beta}} and {{DeviceOrientationEvent/gamma}} attributes set to null.

<h3 id="deviceorientationabsolute">deviceorientationabsolute Event</h3>

<div class="issue">
The {{deviceorientationabsolute}} event and its {{Window/ondeviceorientationabsolute}} event handler IDL attribute have <a href="https://wpt.fyi/results/orientation-event/ondeviceorientationabsolute.https.html">limited implementation experience</a>.
</div>

<pre class="idl">
partial interface Window {
    [SecureContext] attribute EventHandler ondeviceorientationabsolute;
};
</pre>

The <dfn attribute for="Window">ondeviceorientationabsolute</dfn> attribute is an [=event handler IDL attribute=] for the <code>ondeviceorientationabsolute</code> [=event handler=], whose [=event handler event type=] is <dfn event for="Window" id="def-deviceorientationabsolute"><code>deviceorientationabsolute</code></dfn>.

A <a event for="Window"><code>deviceorientationabsolute</code></a> event is completely analogous to the <a event for="Window"><code>deviceorientation</code></a> event, except that it must always provide <a>absolute orientation</a> data.

<div algorithm="deviceorientationabsolute firing steps">
Whenever a <a>significant change in orientation</a> occurs, the user agent must execute the following steps on a <a for="/">navigable</a>'s <a for="navigable">active window</a> <var>window</var>:

  1. Invoke <a>fire an orientation event</a> with <a event for="Window"><code>deviceorientationabsolute</code></a>, <var>window</var>, and true.

</div>

<!--
  * https://github.com/w3c/deviceorientation/issues/118: Does this mean a single event should be fired?
  * https://github.com/w3c/deviceorientation/issues/119: Should absolute's value be set here too?
  * Should this be a proper <dfn> in an algorithm?
-->
If an implementation can never provide absolute orientation information, the event should be fired with the {{DeviceOrientationEvent/alpha}}, {{DeviceOrientationEvent/beta}} and {{DeviceOrientationEvent/gamma}} attributes set to null.

<h3 id="devicemotion">devicemotion Event</h3>

### The DeviceMotionEventAcceleration interface ### {#device-motion-event-acceleration-api}

<pre class="idl">
[Exposed=Window, SecureContext]
interface DeviceMotionEventAcceleration {
    readonly attribute double? x;
    readonly attribute double? y;
    readonly attribute double? z;
};
</pre>

The {{DeviceMotionEventAcceleration}} interface represents the device's acceleration as described in [[#device-motion-model]]. It has the following associated data:

 : <dfn for="DeviceMotionEventAcceleration">x axis acceleration</dfn>
 :: The device's acceleration rate along the X axis, or null. It is initially null.
 : <dfn for="DeviceMotionEventAcceleration">y axis acceleration</dfn>
 :: The device's acceleration rate along the Y axis, or null. It is initially null.
 : <dfn for="DeviceMotionEventAcceleration">z axis acceleration</dfn>
 :: The device's acceleration rate along the Z axis, or null. It is initially null.

The <dfn attribute for="DeviceMotionEventAcceleration">x</dfn> getter steps are to return the value of <a>this</a>'s <a for="DeviceMotionEventAcceleration">x axis acceleration</a>.

The <dfn attribute for="DeviceMotionEventAcceleration">y</dfn> getter steps are to return the value of <a>this</a>'s <a for="DeviceMotionEventAcceleration">y axis acceleration</a>.

The <dfn attribute for="DeviceMotionEventAcceleration">z</dfn> getter steps are to return the value of <a>this</a>'s <a for="DeviceMotionEventAcceleration">z axis acceleration</a>.

### The DeviceMotionEventRotationRate interface ### {#device-motion-event-rotation-rate-api}

<pre class="idl">
[Exposed=Window, SecureContext]
interface DeviceMotionEventRotationRate {
    readonly attribute double? alpha;
    readonly attribute double? beta;
    readonly attribute double? gamma;
};
</pre>

The {{DeviceMotionEventRotationRate}} interface represents the device's <a>rotation rate</a> as described in [[#device-motion-model]]. It has the following associated data:

 : <dfn for="DeviceMotionEventRotationRate">x axis rotation rate</dfn>
 :: The device's rotation rate about the X axis, or null. It is initially null.
 : <dfn for="DeviceMotionEventRotationRate">y axis rotation rate</dfn>
 :: The device's rotation rate about the Y axis, or null. It is initially null.
 : <dfn for="DeviceMotionEventRotationRate">z axis rotation rate</dfn>
 :: The device's rotation rate about the Z axis, or null. It is initially null.

The <dfn attribute for="DeviceMotionEventRotationRate">alpha</dfn> getter steps are to return the value of <a>this</a>'s <a for="DeviceMotionEventRotationRate">x axis rotation rate</a>.

The <dfn attribute for="DeviceMotionEventRotationRate">beta</dfn> getter steps are to return the value of <a>this</a>'s <a for="DeviceMotionEventRotationRate">y axis rotation rate</a>.

The <dfn attribute for="DeviceMotionEventRotationRate">gamma</dfn> getter steps are to return the value of <a>this</a>'s <a for="DeviceMotionEventRotationRate">z axis rotation rate</a>.

### The DeviceMotionEvent interface ### {#device-motion-event-api}

<pre class="idl">
partial interface Window {
    [SecureContext] attribute EventHandler ondevicemotion;
};

[Exposed=Window, SecureContext]
interface DeviceMotionEvent : Event {
    constructor(DOMString type, optional DeviceMotionEventInit eventInitDict = {});
    readonly attribute DeviceMotionEventAcceleration? acceleration;
    readonly attribute DeviceMotionEventAcceleration? accelerationIncludingGravity;
    readonly attribute DeviceMotionEventRotationRate? rotationRate;
    readonly attribute double interval;

    static Promise&lt;PermissionState> requestPermission();
};

dictionary DeviceMotionEventAccelerationInit {
    double? x = null;
    double? y = null;
    double? z = null;
};

dictionary DeviceMotionEventRotationRateInit {
    double? alpha = null;
    double? beta = null;
    double? gamma = null;
};

dictionary DeviceMotionEventInit : EventInit {
    DeviceMotionEventAccelerationInit acceleration;
    DeviceMotionEventAccelerationInit accelerationIncludingGravity;
    DeviceMotionEventRotationRateInit rotationRate;
    double interval = 0;
};
</pre>

The <dfn attribute for="Window">ondevicemotion</dfn> attribute is an [=event handler IDL attribute=] for the <code>ondevicemotion</code> [=event handler=], whose [=event handler event type=] is <dfn event for=Window id="def-devicemotion"><code>devicemotion</code></dfn>.

<!--
https://github.com/w3c/deviceorientation/issues/91: if we align DeviceMotionEvent's attributes with DeviceMotionEventInit's attributes, the "when the object is created" part can be removed since it will be redundant.
-->

The <dfn attribute for="DeviceMotionEvent">acceleration</dfn> attribute must return the value it was initialized to. When the object is created, this attribute must be initialized to null. It represents the device's <a>linear acceleration</a>.

The <dfn attribute for="DeviceMotionEvent">accelerationIncludingGravity</dfn> attribute must return the value it was initialized to. When the object is created, this attribute must be initialized to null. It represents the device's <a>acceleration with gravity</a>.

The <dfn attribute for="DeviceMotionEvent">rotationRate</dfn> attribute must return the value it was initialized to. When the object is created, this attribute must be initialized to null. It represents the device's <a>rotation rate</a>.

The <dfn attribute for="DeviceMotionEvent">interval</dfn> attribute must return the value it was initialized to. It represents the interval at which data is obtained from the underlying hardware and must be expressed in milliseconds (ms). It is constant to simplify filtering of the data by the Web application.

<div algorithm>
The <dfn method for="DeviceMotionEvent">requestPermission()</dfn> method steps are:

 1. Let <var>global</var> be the <a>current global object</a>.
 1. Let <var>hasTransientActivation</var> be true if <a>this</a>'s <a>relevant global object</a> has <a>transient activation</a>, and false otherwise.
 1. Let <var>result</var> be <a>a new promise</a> in <a>this</a>'s <a>relevant Realm</a>.
 1. Run these steps <a>in parallel</a>:
     1. Let <var>permissions</var> be « "<a permission>accelerometer</a>", "<a permission>gyroscope</a>" ».
     1. <a for="list">For each</a> <var>name</var> of <var>permissions</var>:
         1. If <var>name</var>'s <a>permission state</a> is "{{PermissionState/prompt}}" and <var>hasTransientActivation</var> is false:
             1. <a>Queue a global task</a> on the <a>device motion and orientation task source</a> given <var>global</var> to <a>reject</a> <var>result</var> with a "{{NotAllowedError}}" {{DOMException}}.
             1. Return.
     1. Let <var>permissionState</var> be "{{PermissionState/granted}}".
     1. <a for="list">For each</a> <var>name</var> of <var>permissions</var>:

         Note: There is no algorithm for requesting multiple permissions at once. However, user agents are encouraged to bundle concurrent requests for different kinds of media into a single user-facing permission prompt.

         1. If the result of <a>requesting permission to use</a> <var>name</var> is not "{{PermissionState/granted}}":
             1. Set <var>permissionState</var> to "{{PermissionState/denied}}".
             1. <a>Break</a>
     1. <a>Queue a global task</a> on the <a>device motion and orientation task source</a> given <var>global</var> to <a>resolve</a> <var>result</var> with <var>permissionState</var>.</li>
 1. Return <var>result</var>.

</div>

<div algorithm="devicemotion firing steps">
At an <a>implementation-defined</a> interval <var>interval</var>, the user agent must execute the following steps on a <a for="/">navigable</a>'s <a for="navigable">active window</a> <var>window</var>:

  1. Let <var>document</var> be <var>window</var>'s <a>associated Document</a>.
  1. <a for="list">For each</a> <var>policy</var> of « "<a data-lt="accelerometer-feature"><code>accelerometer</code></a>", "<a data-lt="gyroscope-feature"><code>gyroscope</code></a>" »:
      1. If <var>document</var> is not <a>allowed to use</a> the <a>policy-controlled feature</a> named <var>policy</var>, return.
  1. Let <var>topLevelTraversable</var> be <var>window</var>'s <a for=Window>navigable</a>'s <a for=navigable>top-level traversable</a>.
  1. Let <var>platformLinearAcceleration</var> be null.
  1. If <var>topLevelTraversable</var>'s <a>virtual sensor mapping</a> <a for=map>contains</a> "<code>linear-acceleration</code>":
      1. Let <var>virtualSensor</var> be <var>topLevelTraversable</var>'s <a>virtual sensor mapping</a>["<code>linear-acceleration</code>"].
      1. If <var>virtualSensor</var>'s <a>can provide readings flag</a> is true, then set <var>platformLinearAcceleration</var> to the latest readings provided to <var>virtualSensor</var>.
  1. Otherwise, if the implementation is able to provide <a>linear acceleration</a>:
      1. Set <var>platformLinearAcceleration</var> to the device's <a>linear acceleration</a> along the X, Y and Z axes.
  1. Let <var>acceleration</var> be null.
  1. If <var>platformLinearAcceleration</var> is not null:
      1. Set <var>acceleration</var> to a <a>new</a> {{DeviceMotionEventAcceleration}} created in <var>window</var>'s <a for="global object">realm</a>.
      1. Set <var>acceleration</var>'s <a for="DeviceMotionEventAcceleration">x axis acceleration</a> to <var>platformLinearAcceleration</var>'s value along the X axis, or null if it cannot be provided.
      1. If <var>acceleration</var>'s <a for="DeviceMotionEventAcceleration">x axis acceleration</a> is not null, limit its precision to no more than 0.1 m/s<sup>2</sup>.
      1. Set <var>acceleration</var>'s <a for="DeviceMotionEventAcceleration">y axis acceleration</a> to <var>platformLinearAcceleration</var>'s value along the Y axis, or null if it cannot be provided.
      1. If <var>acceleration</var>'s <a for="DeviceMotionEventAcceleration">y axis acceleration</a> is not null, limit its precision to no more than 0.1 m/s<sup>2</sup>.
      1. Set <var>acceleration</var>'s <a for="DeviceMotionEventAcceleration">z axis acceleration</a> to <var>platformLinearAcceleration</var>'s value along the Z axis, or null if it cannot be provided.
      1. If <var>acceleration</var>'s <a for="DeviceMotionEventAcceleration">z axis acceleration</a> is not null, limit its precision to no more than 0.1 m/s<sup>2</sup>.
  1. Let <var>platformAccelerationIncludingGravity</var> be null.
  1. If <var>topLevelTraversable</var>'s <a>virtual sensor mapping</a> <a for=map>contains</a> "<code>accelerometer</code>":
      1. Let <var>virtualSensor</var> be <var>topLevelTraversable</var>'s <a>virtual sensor mapping</a>["<code>accelerometer</code>"].
      1. If <var>virtualSensor</var>'s <a>can provide readings flag</a> is true, then set <var>platformAccelerationIncludingGravity</var> to the latest readings provided to <var>virtualSensor</var>.
  1. Otherwise, if the implementation is able to provide <a>acceleration with gravity</a>:
      1. Set <var>platformAccelerationIncludingGravity</var> to the device's <a>linear acceleration</a> along the X, Y and Z axes.
  1. Let <var>accelerationIncludingGravity</var> be null.
  1. If <var>platformAccelerationIncludingGravity</var> is not null:
      1. Set <var>accelerationIncludingGravity</var> to a <a>new</a> {{DeviceMotionEventAcceleration}} created in <var>window</var>'s <a for="global object">realm</a>.
      1. Set <var>accelerationIncludingGravity</var>'s <a for="DeviceMotionEventAcceleration">x axis acceleration</a> to <var>platformAccelerationIncludingGravity</var>'s value along the X axis, or null if it cannot be provided.
      1. If <var>accelerationIncludingGravity</var>'s <a for="DeviceMotionEventAcceleration">x axis acceleration</a> is not null, limit its precision to no more than 0.1 m/s<sup>2</sup>.
      1. Set <var>accelerationIncludingGravity</var>'s <a for="DeviceMotionEventAcceleration">y axis acceleration</a> to <var>platformAccelerationIncludingGravity</var>'s value along the Y axis, or null if it cannot be provided.
      1. If <var>accelerationIncludingGravity</var>'s <a for="DeviceMotionEventAcceleration">y axis acceleration</a> is not null, limit its precision to no more than 0.1 m/s<sup>2</sup>.
      1. Set <var>accelerationIncludingGravity</var>'s <a for="DeviceMotionEventAcceleration">z axis acceleration</a> to <var>platformAccelerationIncludingGravity</var>'s value along the Z axis, or null if it cannot be provided.
      1. If <var>accelerationIncludingGravity</var>'s <a for="DeviceMotionEventAcceleration">z axis acceleration</a> is not null, limit its precision to no more than 0.1 m/s<sup>2</sup>.
  1. Let <var>platformRotationRate</var> be null.
  1. If <var>topLevelTraversable</var>'s <a>virtual sensor mapping</a> <a for=map>contains</a> "<code>gyroscope</code>":
      1. Let <var>virtualSensor</var> be <var>topLevelTraversable</var>'s <a>virtual sensor mapping</a>["<code>gyroscope</code>"].
      1. If <var>virtualSensor</var>'s <a>can provide readings flag</a> is true, then set <var>platformRotationRate</var> to the latest readings provided to <var>virtualSensor</var>.
  1. Otherwise, if the implementation is able to provide <a>rotation rate</a>:
      1. Set <var>platformRotationRate</var> to the device's <a>rotation rate</a> about the X, Y and Z axes.
  1. Let <var>rotationRate</var> be null.
  1. If <var>platformRotationRate</var> is not null:
      1. Set <var>rotationRate</var> to a <a>new</a> {{DeviceMotionEventRotationRate}} created in <var>window</var>'s <a for="global object">realm</a>.
      1. Set <var>rotationRate</var>'s <a for="DeviceMotionEventRotationRate">x axis rotation rate</a> to <var>platformRotationRate</var>'s value about the X axis, or null if it cannot be provided.
      1. If <var>rotationRate</var>'s <a for="DeviceMotionEventRotationRate">x axis rotation rate</a> is not null, limit its precision to no more than 0.1 deg/s.
      1. Set <var>rotationRate</var>'s <a for="DeviceMotionEventRotationRate">y axis rotation rate</a> to <var>platformRotationRate</var>'s value about the Y axis, or null if it cannot be provided.
      1. If <var>rotationRate</var>'s <a for="DeviceMotionEventRotationRate">y axis rotation rate</a> is not null, limit its precision to no more than 0.1 deg/s.
      1. Set <var>rotationRate</var>'s <a for="DeviceMotionEventRotationRate">z axis rotation rate</a> to <var>platformRotationRate</var>'s value about the Z axis, or null if it cannot be provided.
      1. If <var>rotationRate</var>'s <a for="DeviceMotionEventRotationRate">z axis rotation rate</a> is not null, limit its precision to no more than 0.1 deg/s.
  1. Let <var>environment</var> be <var>window</var>'s <a>relevant settings object</a>.
  1. Run these steps <a>in parallel</a>:
    1. <a for="list">For each</a> <var>permission name</var> in « "<a permission>accelerometer</a>", "<a permission>gyroscope</a>" »:
        1. Let <var>state</var> be the result of <a>getting the current permission state</a> with <var>permission name</var> and <var>environment</var>.
        1. If <var>state</var> is not "{{PermissionState/granted}}", return.
    1. <a>Queue a global task</a> on the <a>device motion and orientation task source</a> given <var>window</var> to run the following steps:
        1. <a>Fire an event</a> named <a event for="Window"><code>devicemotion</code></a> at <var>window</var>, using {{DeviceMotionEvent}}, with the {{DeviceMotionEvent/acceleration}} attribute initialized to <var>acceleration</var>, the {{DeviceMotionEvent/accelerationIncludingGravity}} attribute initialized to <var>accelerationIncludingGravity</var>, the {{DeviceMotionEvent/rotationRate}} attribute initialized to <var>rotationRate</var>, and the {{DeviceMotionEvent/interval}} attribute initialized to <var>interval</var>.

</div>

<!--
  * https://github.com/w3c/deviceorientation/issues/118: Does this mean a single event should be fired?
  * Should this be a proper <dfn> in an algorithm?
-->
If an implementation can never provide motion information, the event should be fired with the {{DeviceMotionEvent/acceleration}}, {{DeviceMotionEvent/accelerationIncludingGravity}} and {{DeviceMotionEvent/rotationRate}} attributes set to null.

Security and privacy considerations {#security-and-privacy}
===========================================================

The API defined in this specification can be used to obtain information from hardware sensors, such as accelerometer, gyroscope and magnetometer. Provided data may be considered as sensitive and could become a subject of attack from malicious web pages. The calibration of accelerometers, gyroscopes and magnetometers may reveal persistent details about the particular sensor hardware [[SENSORID]]. The main attack vectors can be categorized into following categories:

* Monitoring of a user input [[TOUCH]]
* Location tracking [[INDOORPOS]]
* User identification [[FINGERPRINT]]

In light of that, implementations may consider visual indicators to signify the use of sensors by the web page. Additionally, this specification requires users to give <a>express permission</a> for the user agent to provide device motion and/or orientation data via the <code>requestPermission()</code> API calls.

Furthermore, to minimize privacy risks, the chance of fingerprinting and other attacks the implementations must:

* fire events only when a [=/navigable=]'s [=navigable/active document=]'s [=visibility state=] is "<code>visible</code>",
* implement [[#permissions-policy-integration]] so that events are fired on [=child navigables=] (including but not restricted to cross-origin ones) only if allowed by the [=/top-level traversable=],
* fire events on a [=/navigable=]'s [=navigable/active windows=] only when its [=relevant settings object=] is a [=secure context=],
* limit precision of attribute values as described in the previous sections.

Additionally, implementing these items may also have a beneficial impact on the battery life of mobile devices.

Use-Cases and Requirements {#use-cases-and-requirements}
========================================================

<h3 id="use-cases">Use-Cases</h3>
<em>This section is non-normative.</em>

<h4 class="no-toc" id="controlling-a-game">Controlling a game</h4>
<em>This section is non-normative.</em>

A gaming Web application monitors the device's orientation and interprets tilting in a certain direction as a means to control an on-screen sprite.

<h4 class="no-toc" id="gesture-recognition">Gesture recognition</h4>
<em>This section is non-normative.</em>

A Web application monitors the device's acceleration and applies signal processing in order to recognize certain specific gestures. For example, using a shaking gesture to clear a web form.

<h4 class="no-toc" id="mapping">Mapping</h4>
<em>This section is non-normative.</em>

A mapping Web application uses the device's orientation to correctly align the map with reality.

<h3 id="requirements">Requirements</h3>
<em>This section is non-normative.</em>

* The specification must provide data that describes the physical orientation in space of the device.
* The specification must provide data that describes the motion in space of the device.
* The specification must allow Web applications to register for changes in the device's orientation.
* The specification must be agnostic to the underlying sources of orientation and motion data.
* The specification must use the existing DOM event framework.

Automation {#automation}
==========

This specification can pose a challenge to test authors, as the events defined here depend on the presence of physical hardware whose readings cannot be easily controlled.

To address this challenge, this document builds upon the [[WEBDRIVER2]] <a>extension commands</a> and infrastructure laid out by [[GENERIC-SENSOR#automation]]. This was chosen over the option of developing completely new and independent infrastructure with separate <a>extension commands</a> because there is significant overlap between the two specifications: not only does testing the [[GENERIC-SENSOR]] specification present similar challenges, but many derived APIs (e.g. [[GYROSCOPE]]) obtain and provide similar information.

This specification only requires implementations to support the [[GENERIC-SENSOR#automation]] section of the [[GENERIC-SENSOR]] specification, not its interfaces and events.

Device Orientation Automation {#device-orientation-automation}
-----------------------------

Automation support for the <a event><code>deviceorientation</code></a> event is built upon virtual sensors that represent accelerometers, gyroscopes and, optionally, magnetometers.

Orientation data retrieved from the platform by the user agent comes from accelerometers, gyroscopes and, optionally, magnetometers. Contrary to motion data, however, these lower-level readings must be transformed into Euler angles in the formation described in [[#device-orientation-model]]. Furthermore, the platform might provide extra APIs to the user agent that already perform some of those conversions from raw acceleration and rotation data.

Therefore, instead of requiring implementations (and automation users) to provide orientation readings via lower-level virtual sensors which use different units of measurement, this specification defines extra <a>virtual sensor types</a> for relative and orientation data in the format used by this specification.

### Parse orientation reading data algorithm ### {#parse-orientation-data-reading-algorithm}

<div algorithm>
To perform the <dfn export>parse orientation data reading</dfn> algorithm, given a JSON {{Object}} <var>parameters</var>:

    1. Let <var>alpha</var> be the result of invoking <a>get a property</a> from <var>parameters</var> with "<code>alpha</code>".
    1. If <var>alpha</var> is not a {{Number}}, or its value is <strong>NaN</strong>, +∞, or −∞, return <strong>undefined</strong>.
    1. If <var>alpha</var> is not in the range [0, 360), then return <strong>undefined</strong>.
    1. Let <var>beta</var> be the result of invoking <a>get a property</a> from <var>parameters</var> with "<code>beta</code>".
    1. If <var>beta</var> is not a {{Number}}, or its value is <strong>NaN</strong>, +∞, or −∞, return <strong>undefined</strong>.
    1. If <var>beta</var> is not in the range [-180, 180), then return <strong>undefined</strong>.
    1. Let <var>gamma</var> be the result of invoking <a>get a property</a> from <var>parameters</var> with "<code>gamma</code>".
    1. If <var>gamma</var> is not a {{Number}}, or its value is <strong>NaN</strong>, +∞, or −∞, return <strong>undefined</strong>.
    1. If <var>gamma</var> is not in the range [-90, 90), then return <strong>undefined</strong>.
    1. Let <var>reading</var> be a new <a>map</a>.
    1. <a for=map>Set</a> <var>reading</var>["<code>alpha</code>"] to <var>alpha</var>.
    1. <a for=map>Set</a> <var>reading</var>["<code>beta</code>"] to <var>beta</var>.
    1. <a for=map>Set</a> <var>reading</var>["<code>gamma</code>"] to <var>gamma</var>.
    1. Return <var>reading</var>.

Note: <var>reading</var> is defined as a <a>map</a> in the algorithm above to prevent a dependency on the <a>sensor reading</a> concept from the [[GENERIC-SENSOR]] specification. They should be interchangeable for the purposes of the algorithm above.

</div>

### The "absolute-orientation" virtual sensor type ### {#absolute-orientation-virtual-sensors}

The <a>per-type virtual sensor metadata</a> <a>map</a> must have the following <a for=map>entry</a>:
:
: <a for=map>key</a>
:: "<code><dfn export data-lt="absolute-orientation virtual sensor type">absolute-orientation</dfn></code>"
: <a for=map>value</a>
:: A <a>virtual sensor metadata</a> whose <a>reading parsing algorithm</a> is <a>parse orientation data reading</a>.

### The "relative-orientation" virtual sensor type ### {#relative-orientation-virtual-sensors}

The <a>per-type virtual sensor metadata</a> <a>map</a> must have the following <a for=map>entry</a>:
:
: <a for=map>key</a>
:: "<code><dfn export data-lt="relative-orientation virtual sensor type">relative-orientation</dfn></code>"
: <a for=map>value</a>
:: A <a>virtual sensor metadata</a> whose <a>reading parsing algorithm</a> is <a>parse orientation data reading</a>.

Device Motion Automation {#device-motion-automation}
------------------------

The motion data retrieved from the platform by the user agent comes from accelerometers and gyroscopes. This specification defines certain <a>per-type virtual sensor metadata</a> entries that are shared with the [[ACCELEROMETER]] and [[GYROSCOPE]] specifications.

Accelerometer virtual sensors are used to provide <a>acceleration with gravity</a> data to the platform. Linear Acceleration virtual sensors are used to provide <a>linear acceleration</a> data to the platform. Gyroscope virtual sensors are used to provide <a>rotation rate</a> data to the platform.

### The "accelerometer" virtual sensor type ### {#accelerometer-virtual-sensors}

The <a>per-type virtual sensor metadata</a> <a>map</a> must have the following <a for=map>entry</a>:

: <a for=map>key</a>
:: "<code><dfn export data-lt="accelerometer virtual sensor type">accelerometer</dfn></code>"
: <a for=map>value</a>
:: A <a>virtual sensor metadata</a> whose <a for="virtual sensor metadata">reading parsing algorithm</a> is <a>parse xyz reading</a>.

### The "linear-acceleration" virtual sensor type ### {#linear-acceleration-virtual-sensors}

The <a>per-type virtual sensor metadata</a> <a>map</a> must have the following <a for=map>entry</a>:

: <a for=map>key</a>
:: "<code><dfn export data-lt="linear-acceleration virtual sensor type">linear-acceleration</dfn></code>"
: <a for=map>value</a>
:: A <a>virtual sensor metadata</a> whose <a for="virtual sensor metadata">reading parsing algorithm</a> is <a>parse xyz reading</a>.

### The "gyroscope" virtual sensor type ### {#gyroscope-virtual-sensors}

The <a>per-type virtual sensor metadata</a> <a>map</a> must have the following <a for=map>entry</a>:

: <a for=map>key</a>
:: "<code><dfn export data-lt="gyroscope virtual sensor type">gyroscope</dfn></code>"
: <a for=map>value</a>
:: A <a>virtual sensor metadata</a> whose <a for="virtual sensor metadata">reading parsing algorithm</a> is <a>parse xyz reading</a>.

<h2 class="no-num" id="examples">A Examples</h2>
<em>This section is non-normative.</em>

<h3 id="worked-example">A.1 Calculating compass heading</h3>

<em>This section is non-normative.</em>

The following worked example is intended as an aid to users of the DeviceOrientation event.

[[#introduction|Introduction]] section provided an example of using the DeviceOrientation event to obtain a compass heading when the device is held with the screen horizontal. This example shows how to determine the compass heading that the user is facing when holding the device with the screen approximately vertical in front of them. An application of this is an augmented-reality system.

More precisely, we wish to determine the compass heading of the horizontal component of a vector which is orthogonal to the device's screen and pointing out of the back of the screen.

If v represents this vector in the rotated device body frame xyz, then v is as follows.

<object class="equation" data="equation1.xhtml" type="application/mathml+xml">
    <p><img src="equation1.png" alt="v = [0; 0; -1]">
</object>

The transformation of v due to the rotation about the z axis can be represented by the following rotation matrix.

<object class="equation" data="equation2.xhtml" type="application/mathml+xml">
    <img src="equation2.png" alt="Z = [cos(alpha) -sin(alpha) 0; sin(alpha) cos(alpha) 0; 0 0 1]">
</object>

The transformation of v due to the rotation about the x axis can be represented by the following rotation matrix.

<object class="equation" data="equation3.xhtml" type="application/mathml+xml">
    <img src="equation3.png" alt="X = [1 0 0; 0 cos(beta) -sin(beta); 0 sin(beta) cos(beta)]">
</object>

The transformation of v due to the rotation about the y axis can be represented by the following rotation matrix.

<object class="equation" data="equation4.xhtml" type="application/mathml+xml">
    <img src="equation4.png" alt="Y = [cos(gamma) 0 sin(gamma); 0 1 0; -sin(gamma) 0 cos(gamma)]">
</object>

If R represents the full rotation matrix of the device in the earth frame XYZ, then since the initial body frame is aligned with the earth, R is as follows.

<object class="equation" data="equation13a.xhtml" type="application/mathml+xml">
    <img src="equation13a.png" alt="R = ZXY = [[cos(alpha) cos(gamma)-sin(alpha) sin(beta) sin(gamma), -cos(beta) sin(alpha), cos(gamma) sin(alpha) sin(beta)+cos(alpha) sin(gamma)], [cos(gamma) sin(alpha)+cos(alpha) sin(beta) sin(gamma), cos(alpha) cos(beta), sin(alpha) sin(gamma)-cos(alpha) cos(gamma) sin(beta)], [-cos(beta) sin(gamma), sin(beta), cos(beta) cos(gamma)]]">
</object>

If v' represents the vector v in the earth frame XYZ, then since the initial body frame is aligned with the earth, v' is as follows.

<object class="equation" data="equation5a.xhtml" type="application/mathml+xml">
    <img src="equation5a.png" alt="v' = Rv">
</object>
</object>
    <object class="equation" data="equation5e.xhtml" type="application/mathml+xml">
    <img src="equation5e.png" alt="v' = [-cos(alpha)sin(gamma)-sin(alpha)sin(beta)cos(gamma); -sin(alpha)sin(gamma)+cos(alpha)sin(beta)cos(gamma); -cos(beta)cos(gamma)]">
</object>

The compass heading &theta; is given by

<object class="equation" data="equation6.xhtml" type="application/mathml+xml">
    <img src="equation6.png" alt="theta = atan((v'_x)/(v'_y)) = atan((-cos(alpha)sin(gamma)-sin(alpha)sin(beta)cos(gamma))/(-sin(alpha)sin(gamma)+cos(alpha)sin(beta)cos(gamma)))">
</object>

provided that &beta; and &gamma; are not both zero.

<div class="example">

The compass heading calculation above can be represented in JavaScript as follows to return the correct compass heading when the provided parameters are defined, not null and represent {{DeviceOrientationEvent/absolute}} values.

<pre class="lang-js">
var degtorad = Math.PI / 180; // Degree-to-Radian conversion

function compassHeading( alpha, beta, gamma ) {

  var _x = beta  ? beta  * degtorad : 0; // beta value
  var _y = gamma ? gamma * degtorad : 0; // gamma value
  var _z = alpha ? alpha * degtorad : 0; // alpha value

  var cX = Math.cos( _x );
  var cY = Math.cos( _y );
  var cZ = Math.cos( _z );
  var sX = Math.sin( _x );
  var sY = Math.sin( _y );
  var sZ = Math.sin( _z );

  // Calculate Vx and Vy components
  var Vx = - cZ * sY - sZ * sX * cY;
  var Vy = - sZ * sY + cZ * sX * cY;

  // Calculate compass heading
  var compassHeading = Math.atan( Vx / Vy );

  // Convert compass heading to use whole unit circle
  if( Vy < 0 ) {
    compassHeading += Math.PI;
  } else if( Vx < 0 ) {
    compassHeading += 2 * Math.PI;
  }

  return compassHeading * ( 180 / Math.PI ); // Compass Heading (in degrees)

}
</pre>
</div>

As a consistency check, if we set &gamma; = 0, then

<object class="equation" data="equation7.xhtml" type="application/mathml+xml">
    <img src="equation7.png" alt="theta = atan(-sin(alpha)sin(beta)/cos(alpha)sin(beta)) = -alpha">
</object>

as expected.

Alternatively, if we set &beta; = 90, then

<object class="equation" data="equation8a.xhtml" type="application/mathml+xml">
    <img src="equation8a.png" alt="theta = atan((-cos(alpha)sin(gamma)-sin(alpha)cos(gamma))/(-sin(alpha)sin(gamma)+cos(alpha)cos(gamma)))">
</object>
<object class="equation" data="equation8b.xhtml" type="application/mathml+xml">
    <img src="equation8b.png" alt="theta = atan(-sin(alpha+gamma)/cos(alpha+gamma)) = -(alpha+gamma)">
</object>

as expected.

<h3 id="worked-example-2">A.2 Alternate device orientation representations</h3>

<em>This section is non-normative.</em>

Describing orientation using Tait-Bryan angles can have some disadvantages such as introducing gimbal lock [[GIMBALLOCK]]. Depending on the intended application it can be useful to convert the Device Orientation values to other rotation representations.

The first alternate orientation representation uses rotation matrices. By combining the component rotation matrices provided in the [[#worked-example|worked example]] above we can represent the orientation of the device body frame as a combined rotation matrix.

If R represents the rotation matrix of the device in the earth frame XYZ, then since the initial body frame is aligned with the earth, R is as follows.

<object class="equation" data="equation13a.xhtml" type="application/mathml+xml">
    <img src="equation13a.png" alt="R = ZXY = [[cos(alpha) cos(gamma)-sin(alpha) sin(beta) sin(gamma), -cos(beta) sin(alpha), cos(gamma) sin(alpha) sin(beta)+cos(alpha) sin(gamma)], [cos(gamma) sin(alpha)+cos(alpha) sin(beta) sin(gamma), cos(alpha) cos(beta), sin(alpha) sin(gamma)-cos(alpha) cos(gamma) sin(beta)], [-cos(beta) sin(gamma), sin(beta), cos(beta) cos(gamma)]]">
</object>

<div class="example">
The above combined rotation matrix can be represented in JavaScript as follows provided passed parameters are defined, not null and represent {{DeviceOrientationEvent/absolute}} values.
<pre class="lang-js">
var degtorad = Math.PI / 180; // Degree-to-Radian conversion

function getRotationMatrix( alpha, beta, gamma ) {

  var _x = beta  ? beta  * degtorad : 0; // beta value
  var _y = gamma ? gamma * degtorad : 0; // gamma value
  var _z = alpha ? alpha * degtorad : 0; // alpha value

  var cX = Math.cos( _x );
  var cY = Math.cos( _y );
  var cZ = Math.cos( _z );
  var sX = Math.sin( _x );
  var sY = Math.sin( _y );
  var sZ = Math.sin( _z );

  //
  // ZXY rotation matrix construction.
  //

  var m11 = cZ * cY - sZ * sX * sY;
  var m12 = - cX * sZ;
  var m13 = cY * sZ * sX + cZ * sY;

  var m21 = cY * sZ + cZ * sX * sY;
  var m22 = cZ * cX;
  var m23 = sZ * sY - cZ * cY * sX;

  var m31 = - cX * sY;
  var m32 = sX;
  var m33 = cX * cY;

  return [
    m11,    m12,    m13,
    m21,    m22,    m23,
    m31,    m32,    m33
  ];

};
</pre>
</div>

Another alternate representation of device orientation data is as Quaternions. [[QUATERNIONS]]

If q represents the unit quaternion of the device in the earth frame XYZ, then since the initial body frame is aligned with the earth, q is as follows.

<object class="equation" data="equation14.xhtml" type="application/mathml+xml">
    <img src="equation14.png" alt="q = [[q_w], [q_x], [q_y], [q_z]] = [[cos(beta)cos(gamma)cos(alpha) - sin(beta)sin(gamma)sin(alpha)], [sin(beta)cos(gamma)cos(alpha) - cos(beta)sin(gamma)sin(alpha)], [cos(beta)sin(gamma)cos(alpha) + sin(beta)cos(gamma)sin(alpha)], [cos(beta)cos(gamma)sin(alpha) + sin(beta)sin(gamma)cos(alpha)]]">
</object>

<div class="example">
The above quaternion can be represented in JavaScript as follows provided the passed parameters are defined, are {{DeviceOrientationEvent/absolute}} values and those parameters are not null.
<pre class="lang-js">
var degtorad = Math.PI / 180; // Degree-to-Radian conversion

function getQuaternion( alpha, beta, gamma ) {

  var _x = beta  ? beta  * degtorad : 0; // beta value
  var _y = gamma ? gamma * degtorad : 0; // gamma value
  var _z = alpha ? alpha * degtorad : 0; // alpha value

  var cX = Math.cos( _x/2 );
  var cY = Math.cos( _y/2 );
  var cZ = Math.cos( _z/2 );
  var sX = Math.sin( _x/2 );
  var sY = Math.sin( _y/2 );
  var sZ = Math.sin( _z/2 );

  //
  // ZXY quaternion construction.
  //

  var w = cX * cY * cZ - sX * sY * sZ;
  var x = sX * cY * cZ - cX * sY * sZ;
  var y = cX * sY * cZ + sX * cY * sZ;
  var z = cX * cY * sZ + sX * sY * cZ;

  return [ w, x, y, z ];

}
</pre>
</div>

We can check that a Unit Quaternion has been constructed correctly using Lagrange's four-square theorem

<object class="equation" data="equation18.xhtml" type="application/mathml+xml">
    <img src="equation18.png" alt="q_w^2 * q_x^2 * q_y^2 * q_z^2 = 1">
</object>

as expected.

<h2 class="no-num" id="acknowledgments">Acknowledgments</h2>

Lars Erik Bolstad, Dean Jackson, Claes Nilsson, George Percivall, Doug Turner, Matt Womer, Chris Dumez

<pre class="anchors">
urlPrefix: https://html.spec.whatwg.org/multipage/
    urlPrefix: webappapis.html; type: dfn
        text: relevant settings object
</pre>

<pre class="biblio">
{
    "EULERANGLES": {
        "href": "https://en.wikipedia.org/wiki/Euler_angles",
        "title": "Euler Angles"
    },
    "TOUCH": {
        "href": "https://arxiv.org/abs/1602.04115",
        "title": "TouchSignatures: Identification of User Touch Actions and PINs Based on Mobile Sensor Data via JavaScript",
        "date": "12 Feb 2016"
    },
    "INDOORPOS": {
        "authors": [
            "Shala, Ubejd",
            "Angel Rodriguez"
        ],
        "href": "http://www.diva-portal.org/smash/record.jsf?pid=diva2%3A475619&dswid=9050",
        "title": "Indoor positioning using sensor-fusion in android devices",
        "date": "2011"
    },
    "FINGERPRINT": {
        "href": "https://arxiv.org/abs/1408.1416",
        "title": "Mobile Device Identification via Sensor Fingerprinting",
        "date": "6 Aug 2014"
    },
    "GIMBALLOCK": {
        "href": "https://en.wikipedia.org/wiki/Gimbal_Lock",
        "title": "Gimbal Lock"
    },
    "PROPERACCELERATION": {
        "href": "https://en.wikipedia.org/wiki/Proper_acceleration",
        "title": "Proper acceleration"
    },
    "QUATERNIONS": {
        "href": "https://en.wikipedia.org/wiki/Quaternion",
        "title": " Quaternions"
    },
    "SENSORID": {
        "href": "https://doi.org/10.1109/SP.2019.00072",
        "title": "SensorID: Sensor Calibration Fingerprinting for Smartphones",
        "date": "2019",
        "authors": [
            "Zhang, Jiexin",
            "Beresford, Alastair R.",
            "Sheret, Ian"
        ],
        "publisher": "IEEE Symposium on Security and Privacy"
    },
    "G-FORCE": {
        "href": "https://en.wikipedia.org/wiki/G-force",
        "title": "G-Force"
    }
}
</pre>

Changes {#changes}
===========

This section summarizes substantial changes and notable editorial improvements to guide review. Full details are available from the <a href="https://github.com/w3c/deviceorientation/commits/main">commit log</a>. Changes since the <a href="https://www.w3.org/TR/2016/CR-orientation-event-20160818/">Candidate Recommendation 2016-08-18</a>:

- Add Permissions Policy integration, which supersedes the previous requirement of only firing events on iframes that were same-origin with the top-level frame
- Add note to implementers about bundling permission requests
- Export powerful features Accelerometer, Gyroscope and Magnetometer
- Add Permissions API integration, start requiring requestPermission() usage
- editorial: Define API section more normatively and with more dfns
- editorial: Reorder acceleration explanation in Device Motion Model section
- editorial: Update explanations of the device rotation and motion references
- editorial: Use more precise event handling terms, modernize others
- editorial: Refer to [[SCREEN-ORIENTATION]] instead of the orientation change event
- editorial: Reword requirements in "Security and privacy considerations"
- Mark use cases and requirements and examples sections non-normative
- Remove the oncompassneedscalibration event
- Update references to "triggered by user activation", now referred to as "transient activation"
- Align with DOM phrasing on firing events
- Add a note about acceleration properties for DeviceMotionEvent
- Add a note explaining how the coordinate system differs from the CSS coordinate system
- Require no more precise than 0.1 degrees, 0.1 degrees per second, 0.1 meters per second squared to mitigate a <a href="https://github.com/w3c/deviceorientation/issues/85">passive fingerprinting issue</a>
- Update constructor definition in IDL with the Web IDL
- Add explicit [Exposed] to interfaces
- Update IDL dictionaries with new dictionary defaulting setup
- Note the deviceorientationabsolute event and its ondeviceorientationabsolute event handler IDL attribute have limited implementation experience
- Add requestPermission() API static operation to both DeviceOrientationEvent and DeviceMotionEvent
- Add [SecureContext] to event handlers ondeviceorientation, ondevicemotion and ondeviceorientationabsolute
- Restrict all interfaces to secure contexts
- Remove [NoInterfaceObject] from DeviceAcceleration and DeviceRotationRate
- Make security and privacy considerations normative
- Add the ondeviceorientationabsolute event handler attribute into the IDL block (was only in prose)
- Remove '?' from dictionary members of DeviceMotionEventInit
- Use [Exposed=Window] extended attribute
